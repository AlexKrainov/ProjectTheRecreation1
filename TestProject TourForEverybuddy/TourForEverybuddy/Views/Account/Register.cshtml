@model TourForEverybuddy.Models.User
@{
    ViewBag.Title = "Register";
    this.Layout = "~/Views/Shared/_GenericLayout.cshtml";
}

@Html.ValidationMessage("EmailIsHave", new { @style = "color: red" })
@Html.ValidationMessage("ValidIsFailed", new { @style = "color: red" })

<div class="RegisterDiv">
    @using (Html.BeginForm())
    {
        @Html.AntiForgeryToken()

        @Html.ValidationSummary(true, "", new { @class = "text-danger" })

        <div>
            @Html.LabelFor(model => model.RouleId)
            @*@Html.RadioButtonFor(model => model.RouleId, 2) Guied
            @Html.RadioButtonFor(model => model.RouleId, 3) User*@
            <div class="4u 12u$(xsmall)">
                @Html.RadioButtonFor(model => model.RouleId, 2, new { id = "priority-low" }) 
                @*<input type="radio" id="priority-low" name="RouleId" checked>*@
                <label for="priority-low">Guied</label>
              @Html.RadioButtonFor(model => model.RouleId, 3, new { id = "priority-normal" })
                @*<input type="radio" id="priority-low" name="RouleId" checked>*@
                <label for="priority-low">User</label>
            </div>
        </div>

        <div>
            @Html.LabelFor(model => model.Name)
            @Html.EditorFor(model => model.Name)
            @Html.ValidationMessageFor(model => model.Name, "", new { @class = "text-danger" })
        </div>
        <div>
            @Html.LabelFor(model => model.LastName)
            @Html.EditorFor(model => model.LastName)
            @Html.ValidationMessageFor(model => model.LastName, "", new { @class = "text-danger" })
        </div>

        <div>
            @Html.LabelFor(model => model.Age)
            @Html.EditorFor(model => model.Age)
            @Html.ValidationMessageFor(model => model.Age, "", new { @class = "text-danger" })
        </div>

        <div>
            @Html.LabelFor(model => model.Email)

            @Html.EditorFor(model => model.Email)
            @Html.ValidationMessageFor(model => model.Email, "", new { @class = "text-danger" })
        </div>

        <div>
            @Html.LabelFor(model => model.Phone)
            @Html.EditorFor(model => model.Phone)
            @Html.ValidationMessageFor(model => model.Phone, "", new { @class = "text-danger" })

        </div>

        <div>
            @Html.LabelFor(model => model.CountryId)
            @Html.DropDownListFor(model => model.CountryId, ViewBag.Countries as IEnumerable<SelectListItem>)
            @Html.ValidationMessageFor(model => model.CountryId, "", new { @class = "text-danger" })
        </div>
        <div>
            @Html.LabelFor(model => model.LanguageId)
            @Html.DropDownListFor(model => model.LanguageId, ViewBag.Languages as IEnumerable<SelectListItem>)
            @Html.ValidationMessageFor(model => model.LanguageId, "", new { @class = "text-danger" })
        </div>

        <div class="Passwords">
            @Html.LabelFor(model => model.Password)
            @Html.TextBox("Password", null, new { @type = "password" })
            @Html.LabelFor(model => model.Password, "Confirm password")
            @Html.TextBox("Password", null, new { @id = "Password2", @type = "password" })

            @*@Html.EditorFor(model => model.Password)*@
            @Html.ValidationMessageFor(model => model.Password, "", new { @class = "text-danger" })
        </div>

        <div>
            @*The Agreement ... field is required.*@
            @Html.ValidationMessageFor(model => model.RouleId, "", new { @class = "text-danger" })
            <input type="checkbox" /> <em>@Html.ActionLink("Agreement", "Agreement", null, new { @target = "blank" })</em>
        </div>
        <input type="submit" value="Create" style="margin: 20px auto auto 230px;" onclick="PreClickRegister()" class="button special disabled" />
    }
</div>

<script src="~/Scripts/jquery-1.10.2.min.js"></script>
<script src="~/Scripts/jquery.validate.min.js"></script>
<script src="~/Scripts/jquery.validate.unobtrusive.min.js"></script>
<script src="~/Scripts/Elements/Register.js"></script>
